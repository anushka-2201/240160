Q-6 - The approach used for this question is similar to the previous question, the only difference is that we dont have any constraint on number of transactions, and after selling the idx is incremented by 2 to follow the constraint that after you sell your stock, you cannot buy stock on the next day. Rest the approach is same as previous.  If we can buy a stock, we can either buy it or skip it. Profit variable stores the max of the two. If we cant buy, we call either sell or not sell, again profit stores max of the two. Then, whatever comes up as profit, we store it in dp, and then return the same. The base case is if idx goes out of bounds.
class Solution {
public:
    int dp[5001][2];
    int maxProfit(vector<int>& prices) {
        memset(dp, -1, sizeof(dp));
        return helper(prices, 0, true);
        
    }
    int helper(vector<int>& vect, int idx, bool canBuy) {
        int n = vect.size();
        if(idx>=n) return 0;
        if(dp[idx][canBuy]!=-1) return dp[idx][canBuy];
        int profit = 0;
        int pick = 0;
        int skip = 0;
        int sell = 0;
        int noSell = 0;
        if(canBuy) {
            pick = -vect[idx]+helper(vect, idx+1, false);
            skip = helper(vect, idx+1, true);
            profit = max(pick, skip);
        }else {
            sell = vect[idx]+helper(vect, idx+2, true);
            noSell = helper(vect, idx+1, false);
            profit = max(sell, noSell);
        }
        dp[idx][canBuy] = profit;
        return dp[idx][canBuy];
    }
};
