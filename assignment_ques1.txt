Q-1 In this question, we are trying to calculate the length of longest common subsequence between two given strings. n and m denote the length of the two strings. First line in the function is the base case, which says if either of n or m becomes negative(to avoid the variable tracking length of two strings go less than zero and access negative indices), the function will return 0. The third line is trying to match the first character of each string, however, it is unnecessary as the base case is already handled in the first line. Moving ahead, variables a, b and c represent different possibilities that we can have.  We can move to the next character in both strings, or in first string or in second string. However, if the following if condition holds true, only c possibility will be incremented by 1, as we have found the current character to be same for both strings to we add 1 in the count of lcs and move to next characters for both strings. Hence, the if condition is buggy. Moving further, in the main function, the dp vector is made to be of size n*m, however to avoid out of bound access, it should be n+1*m+1( to allow 0 based indexing without out of bounds access). 
